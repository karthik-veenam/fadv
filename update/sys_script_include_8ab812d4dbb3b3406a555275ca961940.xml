<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_fadv.FirstAdvantageSpokeUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>First Advantage Spoke Utils</description>
        <name>FirstAdvantageSpokeUtils</name>
        <script><![CDATA[var FirstAdvantageSpokeUtils = Class.create();
FirstAdvantageSpokeUtils.prototype = {
    initialize: function() {},

    trimStringInputs: function(inputs) {
        for (var key in inputs) {
            if (inputs[key] && typeof inputs[key] == 'string') {
                inputs[key] = inputs[key].trim();
            }
        }
        return inputs;
    },

    //Array of objects payload builder.
    buildArrayOfObjectsPayload: function(key, inputs) {
        var data = [];
        var payload = {};

        for (var i = 0; i < inputs.length; i++) {
            payload = {};
            for (key in inputs[i]) {
                if (inputs[i][key])
                    payload[key] = inputs[i][key];
            }

            if (Object.getOwnPropertyNames(payload).length)
                data.push(payload);
        }

        if (data.length != 0)
            return data;
        else
            return undefined;
    },

    //Build array payload.
    buildArrayPayload: function(key, inputs) {
        data = [];

        if (inputs === undefined || inputs == '')
            data = undefined;

        else
            data = inputs;

        return data;
    },

    validateCandidate: function(candidate_id) {
        try {
            if (candidate_id) {
                return encodeURI(candidate_id);
            } else {
                throw new Error(
                    "Provided Candidate ID is invalid or not found."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Candidate ID is invalid or not found.");
        }
    },

    validateEmail: function(email) {
        try {
            if (email) {
                return encodeURI(email);
            } else {
                throw new Error(
                    "Provided Email is invalid."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Email is invalid."
            );
        }
    },
    validateFirstName: function(first_name) {        
        try {
            if (first_name) {
                return encodeURI(first_name);
            } else {
                throw new Error(
                    "Provided First Name is invalid."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided First Name is invalid."
            );
        }
    },
	

    validateLastName: function(last_name) {
        try {
            if (last_name) {
                return encodeURI(last_name);
            } else {
                throw new Error(
                    "Provided Last Name is invalid."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Last Name is invalid."
            );
        }
    },

	validatePhoneNumber: function(number) {
        try {
            if (number) {
                return encodeURI(number);

            } else {
                throw new Error(
                    "Provided Phone Number is invalid."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Phone Number is invalid."
            );
        }
    },
  
    validateOrder: function(order_id) {
        try {
            if (order_id) {
                return encodeURI(order_id);
            } else {
                throw new Error(
                    "Provided Order ID is invalid or not provided.");
            }
        } catch (err) {
            throw new Error(
                "Provided Order ID is invalid or not provided.");
        }
    },

    validateApplicant: function(applicant_id) {
        try {
            if (applicant_id) {
                return encodeURI(applicant_id);
            } else {
                throw new Error(
                    "Provided Applicant ID is invalid or not provided."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Applicant ID is invalid or not provided.");
        }
    },

    validateOrderAs: function() {
        throw new Error("Either Account ID, User ID or Email under Order As is not provided.");
    },

    validateGetAccountDetailsByAccountID: function() {
        throw new Error("Account ID is required");
    },

    updateRecord: function(record, url) {
        var tablename = record.getTableName();
        var gr = new GlideRecord(tablename);
        gr.addQuery('sys_id', record.sys_id);
        gr.query();
        while (gr.next()) {
            gr['work_notes'] = url;
            gr.update();
        }
        return;
    },

    activateDeactivateUser: function(action) {
        throw new Error('Provided ' + action + " is invalid or not found.");
    },

    validateEnrollmentID: function(enrollment_id) {
        try {
            if (enrollment_id) {
                return encodeURI(enrollment_id);
            } else {
                throw new Error(
                    "Provided Enrollment ID is invalid or not found."
                );
            }
        } catch (err) {
            throw new Error(
                "Provided Enrollment ID is invalid or not found.");
        }
    },

    updateInviteTable: function(invite_id) {
        var gr = new GlideRecord('6bbf3eb0-cfd5-11e9-b8c3-02682d0e8a77');
        gr.addQuery("invite_id", invite_id);
        gr.query();
        if (!gr.hasNext()) {
            gr.setValue('invite_id', invite_id);
            gr.update();
        }

    },
    setErrorMessage: function(outputs) {
        outputs.status = "Error";
        outputs.error_message = "Either provided Order ID or User ID is invalid/incorrect.";
        return outputs;
    },
    throwMessage: function() {
        throw new Error("Either provided Order ID or User ID is invalid/incorrect.");
    },
	
	validateUserName: function(first_name) {
     
    throw new Error ('First Name field appears to be empty.');  
           
    },
	validateUserLastName: function(last_name) {
      
    throw new Error ('Last Name field appears to be empty.');  
           
    },
	
	validateUserPhone: function(phone) {
       
    throw new Error ('Phone field appears to be empty.');  
          
    },
	validateUserEmail: function(email) {
       
    throw new Error (' Email field appears to be empty.');  
          
    },
	
	
	
    type: 'FirstAdvantageSpokeUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mohammadik</sys_created_by>
        <sys_created_on>2019-09-06 06:28:57</sys_created_on>
        <sys_id>8ab812d4dbb3b3406a555275ca961940</sys_id>
        <sys_mod_count>141</sys_mod_count>
        <sys_name>FirstAdvantageSpokeUtils</sys_name>
        <sys_package display_value="First Advantage Spoke" source="x_snc_fadv">56e01698dbb333403e146583ca96192d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="First Advantage Spoke">56e01698dbb333403e146583ca96192d</sys_scope>
        <sys_update_name>sys_script_include_8ab812d4dbb3b3406a555275ca961940</sys_update_name>
        <sys_updated_by>sheetals</sys_updated_by>
        <sys_updated_on>2019-12-06 07:39:13</sys_updated_on>
    </sys_script_include>
</record_update>
