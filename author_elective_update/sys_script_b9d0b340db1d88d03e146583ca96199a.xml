<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script"><sys_script action="DELETE"><abort_action>false</abort_action><access>package_private</access><action_delete>false</action_delete><action_insert>false</action_insert><action_query>false</action_query><action_update>false</action_update><active>true</active><add_message>false</add_message><advanced>true</advanced><change_fields>false</change_fields><client_callable>false</client_callable><collection>x_snc_fadv_first_advantage_oauth_2_0_credentials</collection><condition/><description/><execute_function>false</execute_function><filter_condition/><is_rest>false</is_rest><message/><name>Verify OAuth access token validity</name><order>100</order><priority>100</priority><rest_method/><rest_method_text/><rest_service/><rest_service_text/><rest_variables/><role_conditions/><script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var oAuthClient = new  sn_auth.GlideOAuthClient();
	var token = oAuthClient.getToken(current.getUniqueValue(), current.oauth_entity_profile);
	var thirtyDaysInSecs = 30 * 86400;
	
	var tokenData = {};
		if (token) {
			if(token.getAccessToken()) {
				tokenData.isAccessToken=true;
				tokenData.expiresInSecs = token.getExpiresIn();
				var tokenExpiresInMs = new GlideTime(token.getExpiresIn() * 1000);
				var tokenExpiresOnDate = new GlideDateTime();
				tokenExpiresOnDate.add(tokenExpiresInMs);
				tokenData.tokenExpiresOnDate=tokenExpiresOnDate.getDisplayValue();
			}
			if (token.getRefreshToken()) {
				tokenData.isRefreshToken=true;
				tokenData.refreshExpiresInSecs = token.getRefreshTokenExpiresIn();
				var refreshExpiresInMs = new GlideTime(token.getRefreshTokenExpiresIn() * 1000);
				var refreshExpiresOnDate = new GlideDateTime();
				refreshExpiresOnDate.add(refreshExpiresInMs);
				tokenData.refreshTokenExpiresOnDate=refreshExpiresOnDate.getDisplayValue();
			}
			if (tokenData.isRefreshToken) {
				// if refreshTokenExpiresInSecs <30 days
				var expiresInSecs = tokenData.refreshExpiresInSecs;
				var expiresAt = tokenData.refreshTokenExpiresOnDate;
				if (expiresInSecs <= 0) {
					gs.addErrorMessage(getTokenExpiredMessage('Refresh', expiresAt));
				} else if (expiresInSecs < thirtyDaysInSecs) {
					// show warning about token about to expire on such date
					gs.addErrorMessage(getTokenAboutToExpireMessage('Refresh', expiresAt));
				} else {
					// show info about having refresh token and will expire on such date
					gs.addInfoMessage(getTokenAvailableMessage('Refresh', expiresAt));
				}
			} else if (tokenData.isAccessToken) {
				// if tokenExpiresInSecs <30 days
				var tokenExpiresInSecs = tokenData.expiresInSecs;
				var tokenExpiresAt = tokenData.tokenExpiresOnDate;
				if (tokenExpiresInSecs <= 0) {
					gs.addErrorMessage(getTokenExpiredMessage('Access', tokenExpiresAt));
				} else if (tokenExpiresInSecs < thirtyDaysInSecs) {
					// show warning about token about to expire on such date
					gs.addErrorMessage(getTokenAboutToExpireMessage('Access', tokenExpiresAt));
				} else {
					// show info about having refresh token and will expire on such date
					gs.addInfoMessage(getTokenAvailableMessage('Access', tokenExpiresAt));
				}
			} else {
				gs.addErrorMessage(getNoTokensAvailableMessage());				
			}
		} else {
			gs.addErrorMessage(getNoTokensAvailableMessage());
		}
		function getTokenExpiredMessage(tokenType) {
			return gs.getMessage('OAuth {0} token is expired. Verify the OAuth configuration and click the \'Get OAuth Token\' link below to request a new token.', tokenType);
		}
		
		function getTokenAboutToExpireMessage(tokenType, tokenExpiresOnDate) {
			return gs.getMessage('OAuth {0} token is available but will expire soon at {1}. Verify the OAuth configuration and click the \'Get OAuth Token\' link below to request a new token.', [tokenType, tokenExpiresOnDate]);
		}
		
		function getTokenAvailableMessage(tokenType, tokenExpiresOnDate) {
			return gs.getMessage('OAuth {0} token is available and will expire at {1}', [tokenType, tokenExpiresOnDate]);
		}
		
		function getNoTokensAvailableMessage() {
			return gs.getMessage('OAuth Access or Refresh tokens are not available. Verify the OAuth configuration and click the \'Get OAuth Token\' link below to request a new token.');
		}
		
		function getLinkLocationStringMessage() {
			return 'Verify the OAuth configuration and click the \'Get OAuth Token\' link below to request a new token.';
		}
	})(current, previous);]]></script><sys_class_name>sys_script</sys_class_name><sys_created_by>priytam</sys_created_by><sys_created_on>2019-11-19 07:50:48</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>b9d0b340db1d88d03e146583ca96199a</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Verify OAuth access token validity</sys_name><sys_overrides/><sys_package display_value="First Advantage Spoke" source="x_snc_fadv">56e01698dbb333403e146583ca96192d</sys_package><sys_policy/><sys_scope display_value="First Advantage Spoke">56e01698dbb333403e146583ca96192d</sys_scope><sys_update_name>sys_script_b9d0b340db1d88d03e146583ca96199a</sys_update_name><sys_updated_by>priytam</sys_updated_by><sys_updated_on>2019-11-19 07:50:48</sys_updated_on><template/><when>before_display</when></sys_script><sys_translated_text action="delete_multiple" query="documentkey=b9d0b340db1d88d03e146583ca96199a"/></record_update>